{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonca\\\\Documents\\\\Curso\\\\MDM\\\\DW\\\\solo_project\\\\webdev-solo-project-app\\\\src\\\\Component\\\\PatternGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatternGenerator = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 1000; // 100 squares wide\n    canvas.height = 500; // 50 squares high\n\n    const squareSize = 10; // Size of each square\n\n    // Create a function to draw a single square\n    function drawSquare(x, y, size, rotation, color) {\n      context.save();\n      context.translate(x, y);\n      context.rotate(rotation * Math.PI / 180); // Convert degrees to radians\n      context.fillStyle = color;\n      context.fillRect(-size / 2, -size / 2, size, size);\n      context.restore();\n    }\n\n    // Generate the grid of squares\n    for (let row = 0; row < 50; row++) {\n      for (let col = 0; col < 100; col++) {\n        const x = col * squareSize + squareSize / 2;\n        const y = row * squareSize + squareSize / 2;\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\n        const color = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`; // Random color\n\n        drawSquare(x, y, squareSize, rotation, color);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 10\n  }, this);\n};\n_s(PatternGenerator, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = PatternGenerator;\nexport default PatternGenerator;\nvar _c;\n$RefreshReg$(_c, \"PatternGenerator\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","PatternGenerator","_s","canvasRef","canvas","current","context","getContext","width","height","squareSize","drawSquare","x","y","size","rotation","color","save","translate","rotate","Math","PI","fillStyle","fillRect","restore","row","col","floor","random","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/solo_project/webdev-solo-project-app/src/Component/PatternGenerator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst PatternGenerator = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n\r\n    canvas.width = 1000; // 100 squares wide\r\n    canvas.height = 500; // 50 squares high\r\n\r\n    const squareSize = 10; // Size of each square\r\n\r\n    // Create a function to draw a single square\r\n    function drawSquare(x, y, size, rotation, color) {\r\n      context.save();\r\n      context.translate(x, y);\r\n      context.rotate((rotation * Math.PI) / 180); // Convert degrees to radians\r\n      context.fillStyle = color;\r\n      context.fillRect(-size / 2, -size / 2, size, size);\r\n      context.restore();\r\n    }\r\n\r\n    // Generate the grid of squares\r\n    for (let row = 0; row < 50; row++) {\r\n      for (let col = 0; col < 100; col++) {\r\n        const x = col * squareSize + squareSize / 2;\r\n        const y = row * squareSize + squareSize / 2;\r\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\r\n        const color = `rgb(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255})`; // Random color\r\n\r\n        drawSquare(x, y, squareSize, rotation, color);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef}></canvas>;\r\n};\r\n\r\nexport default PatternGenerator;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEvCH,MAAM,CAACI,KAAK,GAAG,IAAI,CAAC,CAAC;IACrBJ,MAAM,CAACK,MAAM,GAAG,GAAG,CAAC,CAAC;;IAErB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB;IACA,SAASC,UAAUA,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,KAAK,EAAE;MAC/CV,OAAO,CAACW,IAAI,CAAC,CAAC;MACdX,OAAO,CAACY,SAAS,CAACN,CAAC,EAAEC,CAAC,CAAC;MACvBP,OAAO,CAACa,MAAM,CAAEJ,QAAQ,GAAGK,IAAI,CAACC,EAAE,GAAI,GAAG,CAAC,CAAC,CAAC;MAC5Cf,OAAO,CAACgB,SAAS,GAAGN,KAAK;MACzBV,OAAO,CAACiB,QAAQ,CAAC,CAACT,IAAI,GAAG,CAAC,EAAE,CAACA,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;MAClDR,OAAO,CAACkB,OAAO,CAAC,CAAC;IACnB;;IAEA;IACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;MACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,GAAG,EAAEA,GAAG,EAAE,EAAE;QAClC,MAAMd,CAAC,GAAGc,GAAG,GAAGhB,UAAU,GAAGA,UAAU,GAAG,CAAC;QAC3C,MAAMG,CAAC,GAAGY,GAAG,GAAGf,UAAU,GAAGA,UAAU,GAAG,CAAC;QAC3C,MAAMK,QAAQ,GAAGK,IAAI,CAACO,KAAK,CAACP,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACrD,MAAMZ,KAAK,GAAI,OAAMI,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,GAAI,KAAIR,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,GAAI,KAAIR,IAAI,CAACQ,MAAM,CAAC,CAAC,GAAG,GAAI,GAAE,CAAC,CAAC;;QAE7FjB,UAAU,CAACC,CAAC,EAAEC,CAAC,EAAEH,UAAU,EAAEK,QAAQ,EAAEC,KAAK,CAAC;MAC/C;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOhB,OAAA;IAAQ6B,GAAG,EAAE1B;EAAU;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAC1C,CAAC;AAAC/B,EAAA,CApCID,gBAAgB;AAAAiC,EAAA,GAAhBjC,gBAAgB;AAsCtB,eAAeA,gBAAgB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}