{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonca\\\\Documents\\\\Curso\\\\MDM\\\\DW\\\\solo_project\\\\webdev-solo-project-app\\\\src\\\\Component\\\\PatternDraw.js\",\n  _s = $RefreshSig$();\nimport { useOnDraw } from './Hooks';\nimport { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatternDraw = ({\n  width,\n  height\n}) => {\n  _s();\n  const {\n    setCanvasRef,\n    onCanvasMouseDown\n  } = useOnDraw(onDraw);\n  const [currentColor, setCurrentColor] = useState('#FF0000');\n  const [drawings, setDrawings] = useState([]); // State to store drawings\n\n  useEffect(() => {\n    // Load saved drawings from localStorage when the component mounts\n    const savedDrawings = JSON.parse(localStorage.getItem('drawings'));\n    if (savedDrawings) {\n      setDrawings(savedDrawings);\n    }\n    clearCanvas();\n  }, []);\n  function onDraw(ctx, point, prevPoint) {\n    drawLine(prevPoint, point, ctx, currentColor, 30);\n  }\n  function drawLine(start, end, ctx, color, width) {\n    var _start;\n    start = (_start = start) !== null && _start !== void 0 ? _start : end;\n    ctx.beginPath();\n    ctx.lineWidth = width;\n    ctx.strokeStyle = color;\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(start.x, start.y, 2, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n  function clearCanvas() {\n    const canvas = document.querySelector('canvas');\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#fffffc'; // Set to white\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n  function changeColor(newColor) {\n    setCurrentColor(newColor);\n  }\n  function saveDrawing() {\n    const canvas = document.querySelector('canvas'); // Get the canvas element\n\n    if (canvas) {\n      const svgData = canvas.toDataURL('image/svg+xml');\n      const updatedDrawings = [...drawings, svgData];\n      if (updatedDrawings.length > 2) {\n        // If there are more than 2 drawings, remove the oldest one\n        updatedDrawings.shift();\n      }\n      setDrawings(updatedDrawings);\n\n      // Save the updated drawings to localStorage\n      localStorage.setItem('drawings', JSON.stringify(updatedDrawings));\n      clearCanvas();\n    }\n  }\n  function clearAllDrawings() {\n    // Clear the array of saved drawings and remove them from localStorage\n    setDrawings([]);\n    localStorage.removeItem('drawings');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: width,\n        height: height,\n        onMouseDown: onCanvasMouseDown,\n        ref: setCanvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: clearCanvas,\n        children: \"limpar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), drawings.length >= 2 ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: saveDrawing,\n        children: \"casa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: saveDrawing,\n        children: \"adicionar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: clearAllDrawings,\n        children: \"apagar todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#ff312e'),\n        children: \"vermelho\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#688e26'),\n        children: \"verde\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#008dd5'),\n        children: \"azul\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#111111'),\n        children: \"preto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: drawings.map((drawing, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"saved-patterns\",\n        src: drawing,\n        alt: `Saved Drawing ${index}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(PatternDraw, \"h0OTwNg+b8Y45vIZViCuIKRFkoM=\", false, function () {\n  return [useOnDraw];\n});\n_c = PatternDraw;\nexport default PatternDraw;\nvar _c;\n$RefreshReg$(_c, \"PatternDraw\");","map":{"version":3,"names":["useOnDraw","useState","useEffect","Link","jsxDEV","_jsxDEV","PatternDraw","width","height","_s","setCanvasRef","onCanvasMouseDown","onDraw","currentColor","setCurrentColor","drawings","setDrawings","savedDrawings","JSON","parse","localStorage","getItem","clearCanvas","ctx","point","prevPoint","drawLine","start","end","color","_start","beginPath","lineWidth","strokeStyle","moveTo","x","y","lineTo","stroke","fillStyle","arc","Math","PI","fill","canvas","document","querySelector","getContext","fillRect","changeColor","newColor","saveDrawing","svgData","toDataURL","updatedDrawings","length","shift","setItem","stringify","clearAllDrawings","removeItem","style","display","children","onMouseDown","ref","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","drawing","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/solo_project/webdev-solo-project-app/src/Component/PatternDraw.js"],"sourcesContent":["import { useOnDraw } from './Hooks';\r\nimport { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst PatternDraw = ({ width, height }) => {\r\n    const { setCanvasRef, onCanvasMouseDown } = useOnDraw(onDraw);\r\n    const [currentColor, setCurrentColor] = useState('#FF0000');\r\n    const [drawings, setDrawings] = useState([]); // State to store drawings\r\n\r\n    useEffect(() => {\r\n        // Load saved drawings from localStorage when the component mounts\r\n        const savedDrawings = JSON.parse(localStorage.getItem('drawings'));\r\n        if (savedDrawings) {\r\n            setDrawings(savedDrawings);\r\n        }\r\n\r\n        clearCanvas();\r\n    }, []);\r\n\r\n    function onDraw(ctx, point, prevPoint) {\r\n        drawLine(prevPoint, point, ctx, currentColor, 30);\r\n    }\r\n\r\n    function drawLine(start, end, ctx, color, width) {\r\n        start = start ?? end;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = width;\r\n        ctx.strokeStyle = color;\r\n        ctx.moveTo(start.x, start.y);\r\n        ctx.lineTo(end.x, end.y);\r\n        ctx.stroke();\r\n\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(start.x, start.y, 2, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    }\r\n\r\n    function clearCanvas() {\r\n        const canvas = document.querySelector('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = '#fffffc'; // Set to white\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    function changeColor(newColor) {\r\n        setCurrentColor(newColor);\r\n    }\r\n\r\n    function saveDrawing() {\r\n        const canvas = document.querySelector('canvas'); // Get the canvas element\r\n\r\n        if (canvas) {\r\n            const svgData = canvas.toDataURL('image/svg+xml');\r\n            const updatedDrawings = [...drawings, svgData];\r\n\r\n            if (updatedDrawings.length > 2) {\r\n                // If there are more than 2 drawings, remove the oldest one\r\n                updatedDrawings.shift();\r\n            }\r\n\r\n            setDrawings(updatedDrawings);\r\n\r\n            // Save the updated drawings to localStorage\r\n            localStorage.setItem('drawings', JSON.stringify(updatedDrawings));\r\n\r\n            clearCanvas();\r\n        }\r\n    }\r\n\r\n    function clearAllDrawings() {\r\n        // Clear the array of saved drawings and remove them from localStorage\r\n        setDrawings([]);\r\n        localStorage.removeItem('drawings');\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex' }}>\r\n            <div>\r\n                <canvas\r\n                    width={width}\r\n                    height={height}\r\n                    onMouseDown={onCanvasMouseDown}\r\n                    ref={setCanvasRef}\r\n                />\r\n                <button className=\"canvas-button\" onClick={clearCanvas}>\r\n                    limpar\r\n                </button>\r\n                {drawings.length >= 2 ? (\r\n                    <button className=\"canvas-button\" onClick={saveDrawing}>\r\n                        casa\r\n                    </button>\r\n                ) : (\r\n                    <button className=\"canvas-button\" onClick={saveDrawing}>\r\n                        adicionar\r\n                    </button>\r\n                )}\r\n                <button className=\"canvas-button\" onClick={clearAllDrawings}>\r\n                    apagar todos\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#ff312e')}>\r\n                    vermelho\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#688e26')}>\r\n                    verde\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#008dd5')}>\r\n                    azul\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#111111')}>\r\n                    preto\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {drawings.map((drawing, index) => (\r\n                    <img\r\n                        className='saved-patterns'\r\n                        key={index}\r\n                        src={drawing}\r\n                        alt={`Saved Drawing ${index}`}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatternDraw;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}