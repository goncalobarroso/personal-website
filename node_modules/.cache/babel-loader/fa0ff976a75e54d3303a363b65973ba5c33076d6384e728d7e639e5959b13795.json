{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonca\\\\Documents\\\\Curso\\\\MDM\\\\DW\\\\solo_project\\\\webdev-solo-project-app\\\\src\\\\Component\\\\PatternDraw.js\",\n  _s = $RefreshSig$();\nimport { useOnDraw } from './Hooks';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatternDraw = ({\n  width,\n  height\n}) => {\n  _s();\n  const {\n    setCanvasRef,\n    onCanvasMouseDown\n  } = useOnDraw(onDraw);\n  const [currentColor, setCurrentColor] = useState('#FF0000');\n  const [drawings, setDrawings] = useState([]); // State to store drawings\n\n  useEffect(() => {\n    // Fetch existing drawings from the server when the component mounts\n    async function fetchDrawings() {\n      try {\n        const response = await fetch('/get-drawings'); // Replace with your server endpoint\n        if (response.ok) {\n          const data = await response.json();\n          setDrawings(data.drawings);\n        }\n      } catch (error) {\n        console.error('Error fetching drawings:', error);\n      }\n    }\n    fetchDrawings();\n  }, []);\n  function onDraw(ctx, point, prevPoint) {\n    drawLine(prevPoint, point, ctx, currentColor, 30);\n  }\n  function drawLine(start, end, ctx, color, width) {\n    var _start;\n    start = (_start = start) !== null && _start !== void 0 ? _start : end;\n    ctx.beginPath();\n    ctx.lineWidth = width;\n    ctx.strokeStyle = color;\n    ctx.moveTo(start.x, start.y);\n    ctx.lineTo(end.x, end.y);\n    ctx.stroke();\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(start.x, start.y, 2, 0, 2 * Math.PI);\n    ctx.fill();\n  }\n  function clearCanvas() {\n    const canvas = document.querySelector('canvas');\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = '#ffffff'; // Set to white\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n  }\n  function changeColor(newColor) {\n    setCurrentColor(newColor);\n  }\n  function saveDrawing() {\n    const canvas = document.querySelector('canvas'); // Get the canvas element\n\n    if (canvas) {\n      const svgData = canvas.toDataURL('image/svg+xml');\n      const updatedDrawings = [...drawings, svgData];\n      if (updatedDrawings.length > 2) {\n        // If there are more than 2 drawings, remove the oldest one\n        updatedDrawings.shift();\n      }\n      setDrawings(updatedDrawings);\n      clearCanvas();\n\n      // Save the drawing data to the server\n      async function saveDrawingData() {\n        try {\n          const response = await fetch('/save-drawing', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              drawing: svgData\n            }) // Send the SVG data to the server\n          });\n\n          if (response.ok) {\n            console.log('Drawing data saved successfully.');\n          } else {\n            console.error('Failed to save drawing data.');\n          }\n        } catch (error) {\n          console.error('Error saving drawing data:', error);\n        }\n      }\n      saveDrawingData();\n    }\n  }\n  function clearAllDrawings() {\n    setDrawings([]);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: width,\n        height: height,\n        onMouseDown: onCanvasMouseDown,\n        ref: setCanvasRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: clearCanvas,\n        children: \"limpar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: saveDrawing,\n        children: \"adicionar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: clearAllDrawings,\n        children: \"apagar todos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#FF0000'),\n        children: \"vermelho\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#00FF00'),\n        children: \"verde\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#0000FF'),\n        children: \"azul\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"canvas-button\",\n        onClick: () => changeColor('#000000'),\n        children: \"preto\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: drawings.map((drawing, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"saved-patterns\",\n        src: drawing,\n        alt: `Saved Drawing ${index}`\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(PatternDraw, \"h0OTwNg+b8Y45vIZViCuIKRFkoM=\", false, function () {\n  return [useOnDraw];\n});\n_c = PatternDraw;\nexport default PatternDraw;\nvar _c;\n$RefreshReg$(_c, \"PatternDraw\");","map":{"version":3,"names":["useOnDraw","useState","useEffect","jsxDEV","_jsxDEV","PatternDraw","width","height","_s","setCanvasRef","onCanvasMouseDown","onDraw","currentColor","setCurrentColor","drawings","setDrawings","fetchDrawings","response","fetch","ok","data","json","error","console","ctx","point","prevPoint","drawLine","start","end","color","_start","beginPath","lineWidth","strokeStyle","moveTo","x","y","lineTo","stroke","fillStyle","arc","Math","PI","fill","clearCanvas","canvas","document","querySelector","getContext","fillRect","changeColor","newColor","saveDrawing","svgData","toDataURL","updatedDrawings","length","shift","saveDrawingData","method","headers","body","JSON","stringify","drawing","log","clearAllDrawings","style","display","children","onMouseDown","ref","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","index","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/solo_project/webdev-solo-project-app/src/Component/PatternDraw.js"],"sourcesContent":["import { useOnDraw } from './Hooks';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst PatternDraw = ({ width, height }) => {\r\n    const { setCanvasRef, onCanvasMouseDown } = useOnDraw(onDraw);\r\n    const [currentColor, setCurrentColor] = useState('#FF0000');\r\n    const [drawings, setDrawings] = useState([]); // State to store drawings\r\n\r\n    useEffect(() => {\r\n        // Fetch existing drawings from the server when the component mounts\r\n        async function fetchDrawings() {\r\n          try {\r\n            const response = await fetch('/get-drawings'); // Replace with your server endpoint\r\n            if (response.ok) {\r\n              const data = await response.json();\r\n              setDrawings(data.drawings);\r\n            }\r\n          } catch (error) {\r\n            console.error('Error fetching drawings:', error);\r\n          }\r\n        }\r\n    \r\n        fetchDrawings();\r\n      }, []);\r\n\r\n    function onDraw(ctx, point, prevPoint) {\r\n        drawLine(prevPoint, point, ctx, currentColor, 30);\r\n    }\r\n\r\n    function drawLine(start, end, ctx, color, width) {\r\n        start = start ?? end;\r\n        ctx.beginPath();\r\n        ctx.lineWidth = width;\r\n        ctx.strokeStyle = color;\r\n        ctx.moveTo(start.x, start.y);\r\n        ctx.lineTo(end.x, end.y);\r\n        ctx.stroke();\r\n\r\n        ctx.fillStyle = color;\r\n        ctx.beginPath();\r\n        ctx.arc(start.x, start.y, 2, 0, 2 * Math.PI);\r\n        ctx.fill();\r\n    }\r\n\r\n    function clearCanvas() {\r\n        const canvas = document.querySelector('canvas');\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.fillStyle = '#ffffff'; // Set to white\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n\r\n    function changeColor(newColor) {\r\n        setCurrentColor(newColor);\r\n    }\r\n\r\n    function saveDrawing() {\r\n        const canvas = document.querySelector('canvas'); // Get the canvas element\r\n    \r\n        if (canvas) {\r\n          const svgData = canvas.toDataURL('image/svg+xml');\r\n          const updatedDrawings = [...drawings, svgData];\r\n    \r\n          if (updatedDrawings.length > 2) {\r\n            // If there are more than 2 drawings, remove the oldest one\r\n            updatedDrawings.shift();\r\n          }\r\n    \r\n          setDrawings(updatedDrawings);\r\n          clearCanvas();\r\n    \r\n          // Save the drawing data to the server\r\n          async function saveDrawingData() {\r\n            try {\r\n              const response = await fetch('/save-drawing', {\r\n                method: 'POST',\r\n                headers: {\r\n                  'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ drawing: svgData }), // Send the SVG data to the server\r\n              });\r\n    \r\n              if (response.ok) {\r\n                console.log('Drawing data saved successfully.');\r\n              } else {\r\n                console.error('Failed to save drawing data.');\r\n              }\r\n            } catch (error) {\r\n              console.error('Error saving drawing data:', error);\r\n            }\r\n          }\r\n    \r\n          saveDrawingData();\r\n        }\r\n      }\r\n\r\n    function clearAllDrawings() {\r\n        setDrawings([]);\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: 'flex' }}>\r\n            <div>\r\n                <canvas\r\n                    width={width}\r\n                    height={height}\r\n                    onMouseDown={onCanvasMouseDown}\r\n                    ref={setCanvasRef}\r\n                />\r\n                <button className=\"canvas-button\" onClick={clearCanvas}>\r\n                    limpar\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={saveDrawing}>\r\n                    adicionar\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={clearAllDrawings}>\r\n                    apagar todos\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#FF0000')}>\r\n                    vermelho\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#00FF00')}>\r\n                    verde\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#0000FF')}>\r\n                    azul\r\n                </button>\r\n                <button className=\"canvas-button\" onClick={() => changeColor('#000000')}>\r\n                    preto\r\n                </button>\r\n            </div>\r\n            <div>\r\n                {drawings.map((drawing, index) => (\r\n                    <img\r\n                        className='saved-patterns'\r\n                        key={index}\r\n                        src={drawing}\r\n                        alt={`Saved Drawing ${index}`}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PatternDraw;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}