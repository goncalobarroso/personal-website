{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonca\\\\Documents\\\\Curso\\\\MDM\\\\DW\\\\solo_project\\\\webdev-solo-project-app\\\\src\\\\Component\\\\PatternGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatternGenerator = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 100; // 100 squares wide\n    canvas.height = 500; // 50 squares high\n\n    const squareSize = 10; // Size of each square\n\n    // Array of image URLs\n    const imageUrls = ['pattern1.svg',\n    // Replace with the actual URL for your first square image\n    'pattern2.svg' // Replace with the actual URL for your second square image\n    ];\n\n    // Function to draw a square image with a specific rotation\n    function drawSquareImage(x, y, size, rotation, imageUrl) {\n      const img = new Image();\n      img.src = imageUrl;\n      img.onload = () => {\n        context.save();\n        context.translate(x, y);\n        context.rotate(rotation * Math.PI / 180); // Convert degrees to radians\n        context.drawImage(img, -size / 2, -size / 2, size, size);\n        context.restore();\n      };\n    }\n\n    // Generate the grid of squares with random rotations and images\n    for (let row = 0; row < 50; row++) {\n      for (let col = 0; col < 100; col++) {\n        const x = col * squareSize + squareSize / 2;\n        const y = row * squareSize + squareSize / 2;\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\n        const imageUrl = imageUrls[Math.floor(Math.random() * 2)]; // Randomly select one of the two square images\n\n        drawSquareImage(x, y, squareSize, rotation, imageUrl);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n_s(PatternGenerator, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = PatternGenerator;\nexport default PatternGenerator;\nvar _c;\n$RefreshReg$(_c, \"PatternGenerator\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","PatternGenerator","_s","canvasRef","canvas","current","context","getContext","width","height","squareSize","imageUrls","drawSquareImage","x","y","size","rotation","imageUrl","img","Image","src","onload","save","translate","rotate","Math","PI","drawImage","restore","row","col","floor","random","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/solo_project/webdev-solo-project-app/src/Component/PatternGenerator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst PatternGenerator = () => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n\r\n    canvas.width = 100; // 100 squares wide\r\n    canvas.height = 500; // 50 squares high\r\n\r\n    const squareSize = 10; // Size of each square\r\n\r\n    // Array of image URLs\r\n    const imageUrls = [\r\n      'pattern1.svg', // Replace with the actual URL for your first square image\r\n      'pattern2.svg', // Replace with the actual URL for your second square image\r\n    ];\r\n\r\n    // Function to draw a square image with a specific rotation\r\n    function drawSquareImage(x, y, size, rotation, imageUrl) {\r\n      const img = new Image();\r\n      img.src = imageUrl;\r\n      img.onload = () => {\r\n        context.save();\r\n        context.translate(x, y);\r\n        context.rotate((rotation * Math.PI) / 180); // Convert degrees to radians\r\n        context.drawImage(img, -size / 2, -size / 2, size, size);\r\n        context.restore();\r\n      };\r\n    }\r\n\r\n    // Generate the grid of squares with random rotations and images\r\n    for (let row = 0; row < 50; row++) {\r\n      for (let col = 0; col < 100; col++) {\r\n        const x = col * squareSize + squareSize / 2;\r\n        const y = row * squareSize + squareSize / 2;\r\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\r\n        const imageUrl = imageUrls[Math.floor(Math.random() * 2)]; // Randomly select one of the two square images\r\n\r\n        drawSquareImage(x, y, squareSize, rotation, imageUrl);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  return <canvas ref={canvasRef}></canvas>;\r\n};\r\n\r\nexport default PatternGenerator;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAMC,SAAS,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,MAAMC,OAAO,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;IAEvCH,MAAM,CAACI,KAAK,GAAG,GAAG,CAAC,CAAC;IACpBJ,MAAM,CAACK,MAAM,GAAG,GAAG,CAAC,CAAC;;IAErB,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB;IACA,MAAMC,SAAS,GAAG,CAChB,cAAc;IAAE;IAChB,cAAc,CAAE;IAAA,CACjB;;IAED;IACA,SAASC,eAAeA,CAACC,CAAC,EAAEC,CAAC,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;MACvD,MAAMC,GAAG,GAAG,IAAIC,KAAK,CAAC,CAAC;MACvBD,GAAG,CAACE,GAAG,GAAGH,QAAQ;MAClBC,GAAG,CAACG,MAAM,GAAG,MAAM;QACjBf,OAAO,CAACgB,IAAI,CAAC,CAAC;QACdhB,OAAO,CAACiB,SAAS,CAACV,CAAC,EAAEC,CAAC,CAAC;QACvBR,OAAO,CAACkB,MAAM,CAAER,QAAQ,GAAGS,IAAI,CAACC,EAAE,GAAI,GAAG,CAAC,CAAC,CAAC;QAC5CpB,OAAO,CAACqB,SAAS,CAACT,GAAG,EAAE,CAACH,IAAI,GAAG,CAAC,EAAE,CAACA,IAAI,GAAG,CAAC,EAAEA,IAAI,EAAEA,IAAI,CAAC;QACxDT,OAAO,CAACsB,OAAO,CAAC,CAAC;MACnB,CAAC;IACH;;IAEA;IACA,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,EAAE,EAAEA,GAAG,EAAE,EAAE;MACjC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,GAAG,EAAEA,GAAG,EAAE,EAAE;QAClC,MAAMjB,CAAC,GAAGiB,GAAG,GAAGpB,UAAU,GAAGA,UAAU,GAAG,CAAC;QAC3C,MAAMI,CAAC,GAAGe,GAAG,GAAGnB,UAAU,GAAGA,UAAU,GAAG,CAAC;QAC3C,MAAMM,QAAQ,GAAGS,IAAI,CAACM,KAAK,CAACN,IAAI,CAACO,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;QACrD,MAAMf,QAAQ,GAAGN,SAAS,CAACc,IAAI,CAACM,KAAK,CAACN,IAAI,CAACO,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;QAE3DpB,eAAe,CAACC,CAAC,EAAEC,CAAC,EAAEJ,UAAU,EAAEM,QAAQ,EAAEC,QAAQ,CAAC;MACvD;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOjB,OAAA;IAAQiC,GAAG,EAAE9B;EAAU;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AAC1C,CAAC;AAACnC,EAAA,CA7CID,gBAAgB;AAAAqC,EAAA,GAAhBrC,gBAAgB;AA+CtB,eAAeA,gBAAgB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}