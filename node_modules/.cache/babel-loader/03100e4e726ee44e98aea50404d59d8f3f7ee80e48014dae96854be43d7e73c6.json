{"ast":null,"code":"import React,{useEffect,useRef}from'react';import'../App.css';// Importing the pattern images from different folders\nimport pattern1_1 from'./patterns/pattern1/pattern1.png';import pattern1_2 from'./patterns/pattern1/pattern2.png';import pattern1_3 from'./patterns/pattern1/pattern3.png';import pattern1_4 from'./patterns/pattern1/pattern4.png';import pattern2_1 from'./patterns/pattern2/pattern1.png';import pattern2_2 from'./patterns/pattern2/pattern2.png';import pattern2_3 from'./patterns/pattern2/pattern3.png';import pattern2_4 from'./patterns/pattern2/pattern4.png';import pattern3_1 from'./patterns/pattern3/pattern1.png';import pattern3_2 from'./patterns/pattern3/pattern2.png';import pattern3_3 from'./patterns/pattern3/pattern3.png';import pattern3_4 from'./patterns/pattern3/pattern4.png';import pattern4_1 from'./patterns/pattern4/pattern1.png';import pattern4_2 from'./patterns/pattern4/pattern2.png';import pattern4_3 from'./patterns/pattern4/pattern3.png';import pattern4_4 from'./patterns/pattern4/pattern4.png';import{jsx as _jsx}from\"react/jsx-runtime\";const CustomPatternGenerator=_ref=>{let{imageArray}=_ref;const canvasRef=useRef(null);useEffect(()=>{const canvas=canvasRef.current;const context=canvas.getContext('2d');const numRows=15;// Number of rows\nconst numCols=30;// Number of columns\nconst squareSize=75;// Size of each square\ncanvas.width=numCols*squareSize;canvas.height=numRows*squareSize;// Function to draw a square image with a specific rotation\nfunction drawSquareImage(x,y,size,rotation,imageUrl){const img=new Image();img.src=imageUrl;img.onload=()=>{context.save();context.translate(x,y);context.rotate(rotation*Math.PI/180);// Convert degrees to radians\ncontext.drawImage(img,-size/2,-size/2,size,size);context.restore();};}// Define arrays of patterns (images) for each folder\nconst patternFolders=[[pattern1_1,pattern1_2,pattern1_3,pattern1_4],[pattern2_1,pattern2_2,pattern2_3,pattern2_4],[pattern3_1,pattern3_2,pattern3_3,pattern3_4],[pattern4_1,pattern4_2,pattern4_3,pattern4_4]];// Generate the grid of squares with random rotations and images\nconst numberOfFolders=4;// Number of pattern folders\nconst folderNumber=Math.floor(Math.random()*numberOfFolders);// Randomly choose a folder\nfor(let row=0;row<numRows;row++){for(let col=0;col<numCols;col++){const x=col*squareSize+squareSize/2;const y=row*squareSize+squareSize/2;const rotation=Math.floor(Math.random()*4)*90;// Random rotation in 90-degree increments\nconst randomValue=Math.random();// Random value between 0 and 1\n// Use the provided imageArray if available, otherwise use the default images from the selected folder\nconst imageUrl=imageArray&&imageArray.length>=1?imageArray[Math.floor(randomValue*imageArray.length)]:getRandomPatternFromFolder(randomValue,patternFolders[folderNumber]);drawSquareImage(x,y,squareSize,rotation,imageUrl);}}},[imageArray]);// Function to get a random image URL from the selected folder based on the random value\nfunction getRandomPatternFromFolder(randomValue,folder){if(randomValue<0.25){return folder[0];}else if(randomValue<0.50){return folder[1];}else if(randomValue<0.75){return folder[2];}else{return folder[3];}}return/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,className:\"background\"});};export default CustomPatternGenerator;","map":{"version":3,"names":["React","useEffect","useRef","pattern1_1","pattern1_2","pattern1_3","pattern1_4","pattern2_1","pattern2_2","pattern2_3","pattern2_4","pattern3_1","pattern3_2","pattern3_3","pattern3_4","pattern4_1","pattern4_2","pattern4_3","pattern4_4","jsx","_jsx","CustomPatternGenerator","_ref","imageArray","canvasRef","canvas","current","context","getContext","numRows","numCols","squareSize","width","height","drawSquareImage","x","y","size","rotation","imageUrl","img","Image","src","onload","save","translate","rotate","Math","PI","drawImage","restore","patternFolders","numberOfFolders","folderNumber","floor","random","row","col","randomValue","length","getRandomPatternFromFolder","folder","ref","className"],"sources":["C:/Users/gonca/Documents/Curso/MDM/1o-Ano/DW/webdev-solo-project/webdev-solo-project-app/src/Component/CustomPatternGenerator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport '../App.css';\r\n// Importing the pattern images from different folders\r\nimport pattern1_1 from './patterns/pattern1/pattern1.png';\r\nimport pattern1_2 from './patterns/pattern1/pattern2.png';\r\nimport pattern1_3 from './patterns/pattern1/pattern3.png';\r\nimport pattern1_4 from './patterns/pattern1/pattern4.png';\r\n\r\nimport pattern2_1 from './patterns/pattern2/pattern1.png';\r\nimport pattern2_2 from './patterns/pattern2/pattern2.png';\r\nimport pattern2_3 from './patterns/pattern2/pattern3.png';\r\nimport pattern2_4 from './patterns/pattern2/pattern4.png';\r\n\r\nimport pattern3_1 from './patterns/pattern3/pattern1.png';\r\nimport pattern3_2 from './patterns/pattern3/pattern2.png';\r\nimport pattern3_3 from './patterns/pattern3/pattern3.png';\r\nimport pattern3_4 from './patterns/pattern3/pattern4.png';\r\n\r\nimport pattern4_1 from './patterns/pattern4/pattern1.png';\r\nimport pattern4_2 from './patterns/pattern4/pattern2.png';\r\nimport pattern4_3 from './patterns/pattern4/pattern3.png';\r\nimport pattern4_4 from './patterns/pattern4/pattern4.png';\r\n\r\nconst CustomPatternGenerator = ({ imageArray }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    const numRows = 15; // Number of rows\r\n    const numCols = 30; // Number of columns\r\n    const squareSize = 75; // Size of each square\r\n\r\n    canvas.width = numCols * squareSize;\r\n    canvas.height = numRows * squareSize;\r\n\r\n    // Function to draw a square image with a specific rotation\r\n    function drawSquareImage(x, y, size, rotation, imageUrl) {\r\n      const img = new Image();\r\n      img.src = imageUrl;\r\n      img.onload = () => {\r\n        context.save();\r\n        context.translate(x, y);\r\n        context.rotate((rotation * Math.PI) / 180); // Convert degrees to radians\r\n        context.drawImage(img, -size / 2, -size / 2, size, size);\r\n        context.restore();\r\n      };\r\n    }\r\n\r\n    // Define arrays of patterns (images) for each folder\r\n    const patternFolders = [\r\n      [pattern1_1, pattern1_2, pattern1_3, pattern1_4],\r\n      [pattern2_1, pattern2_2, pattern2_3, pattern2_4],\r\n      [pattern3_1, pattern3_2, pattern3_3, pattern3_4],\r\n      [pattern4_1, pattern4_2, pattern4_3, pattern4_4],\r\n    ];\r\n\r\n    // Generate the grid of squares with random rotations and images\r\n    const numberOfFolders = 4; // Number of pattern folders\r\n    const folderNumber = Math.floor(Math.random() * numberOfFolders); // Randomly choose a folder\r\n\r\n    for (let row = 0; row < numRows; row++) {\r\n      for (let col = 0; col < numCols; col++) {\r\n        const x = col * squareSize + squareSize / 2;\r\n        const y = row * squareSize + squareSize / 2;\r\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\r\n        const randomValue = Math.random(); // Random value between 0 and 1\r\n\r\n        // Use the provided imageArray if available, otherwise use the default images from the selected folder\r\n        const imageUrl = imageArray && imageArray.length >= 1\r\n          ? imageArray[Math.floor(randomValue * imageArray.length)]\r\n          : getRandomPatternFromFolder(randomValue, patternFolders[folderNumber]);\r\n\r\n        drawSquareImage(x, y, squareSize, rotation, imageUrl);\r\n      }\r\n    }\r\n  }, [imageArray]);\r\n\r\n  // Function to get a random image URL from the selected folder based on the random value\r\n  function getRandomPatternFromFolder(randomValue, folder) {\r\n    if (randomValue < 0.25) {\r\n      return folder[0];\r\n    } else if (randomValue < 0.50) {\r\n      return folder[1];\r\n    } else if (randomValue < 0.75) {\r\n      return folder[2];\r\n    } else {\r\n      return folder[3];\r\n    }\r\n  }\r\n\r\n  return <canvas ref={canvasRef} className='background'></canvas>;\r\n};\r\n\r\nexport default CustomPatternGenerator;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}