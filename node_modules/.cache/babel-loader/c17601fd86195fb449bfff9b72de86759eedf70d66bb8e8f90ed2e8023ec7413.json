{"ast":null,"code":"import React,{useEffect,useRef}from'react';import'../App.css';import{jsx as _jsx}from\"react/jsx-runtime\";var CustomPatternGenerator=function CustomPatternGenerator(_ref){var array=_ref.array;var canvasRef=useRef(null);useEffect(function(){// This code will run only once when the component mounts\nvar canvas=canvasRef.current;var context=canvas.getContext('2d');var numRows=15;// Number of rows\nvar numCols=30;// Number of columns\nvar squareSize=75;// Size of each square\ncanvas.width=numCols*squareSize;canvas.height=numRows*squareSize;// Function to draw a square image with a specific rotation\nfunction drawSquareImage(x,y,size,rotation,imageUrl){var img=new Image();img.src=imageUrl;img.onload=function(){context.save();context.translate(x,y);context.rotate(rotation*Math.PI/180);// Convert degrees to radians\ncontext.drawImage(img,-size/2,-size/2,size,size);context.restore();};}// Generate the grid of squares with random rotations and images\nfor(var row=0;row<numRows;row++){for(var col=0;col<numCols;col++){var x=col*squareSize+squareSize/2;var y=row*squareSize+squareSize/2;var rotation=Math.floor(Math.random()*4)*90;// Random rotation in 90-degree increments\nvar randomValue=Math.random();// Random value between 0 and 1\nvar imageUrl=array[Math.floor(randomValue*array.length)];drawSquareImage(x,y,squareSize,rotation,imageUrl);}}},[]);// Empty dependency array ensures this runs only once\nreturn/*#__PURE__*/_jsx(\"canvas\",{ref:canvasRef,className:\"background\"});};export default CustomPatternGenerator;","map":{"version":3,"names":["React","useEffect","useRef","jsx","_jsx","CustomPatternGenerator","_ref","array","canvasRef","canvas","current","context","getContext","numRows","numCols","squareSize","width","height","drawSquareImage","x","y","size","rotation","imageUrl","img","Image","src","onload","save","translate","rotate","Math","PI","drawImage","restore","row","col","floor","random","randomValue","length","ref","className"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/solo_project/webdev-solo-project-app/src/Component/CustomPatternGenerator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport '../App.css';\r\n\r\nconst CustomPatternGenerator = ({ array }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    // This code will run only once when the component mounts\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    const numRows = 15; // Number of rows\r\n    const numCols = 30; // Number of columns\r\n    const squareSize = 75; // Size of each square\r\n\r\n    canvas.width = numCols * squareSize;\r\n    canvas.height = numRows * squareSize;\r\n\r\n    // Function to draw a square image with a specific rotation\r\n    function drawSquareImage(x, y, size, rotation, imageUrl) {\r\n      const img = new Image();\r\n      img.src = imageUrl;\r\n      img.onload = () => {\r\n        context.save();\r\n        context.translate(x, y);\r\n        context.rotate((rotation * Math.PI) / 180); // Convert degrees to radians\r\n        context.drawImage(img, -size / 2, -size / 2, size, size);\r\n        context.restore();\r\n      };\r\n    }\r\n\r\n    // Generate the grid of squares with random rotations and images\r\n    for (let row = 0; row < numRows; row++) {\r\n      for (let col = 0; col < numCols; col++) {\r\n        const x = col * squareSize + squareSize / 2;\r\n        const y = row * squareSize + squareSize / 2;\r\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\r\n        const randomValue = Math.random(); // Random value between 0 and 1\r\n        const imageUrl = array[Math.floor(randomValue * array.length)];\r\n\r\n        drawSquareImage(x, y, squareSize, rotation, imageUrl);\r\n      }\r\n    }\r\n  }, []); // Empty dependency array ensures this runs only once\r\n\r\n  return <canvas ref={canvasRef} className='background'></canvas>;\r\n};\r\n\r\nexport default CustomPatternGenerator;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAChD,MAAO,YAAY,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAEpB,GAAM,CAAAC,sBAAsB,CAAG,QAAzB,CAAAA,sBAAsBA,CAAAC,IAAA,CAAkB,IAAZ,CAAAC,KAAK,CAAAD,IAAA,CAALC,KAAK,CACrC,GAAM,CAAAC,SAAS,CAAGN,MAAM,CAAC,IAAI,CAAC,CAE9BD,SAAS,CAAC,UAAM,CACd;AACA,GAAM,CAAAQ,MAAM,CAAGD,SAAS,CAACE,OAAO,CAChC,GAAM,CAAAC,OAAO,CAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC,CACvC,GAAM,CAAAC,OAAO,CAAG,EAAE,CAAE;AACpB,GAAM,CAAAC,OAAO,CAAG,EAAE,CAAE;AACpB,GAAM,CAAAC,UAAU,CAAG,EAAE,CAAE;AAEvBN,MAAM,CAACO,KAAK,CAAGF,OAAO,CAAGC,UAAU,CACnCN,MAAM,CAACQ,MAAM,CAAGJ,OAAO,CAAGE,UAAU,CAEpC;AACA,QAAS,CAAAG,eAAeA,CAACC,CAAC,CAAEC,CAAC,CAAEC,IAAI,CAAEC,QAAQ,CAAEC,QAAQ,CAAE,CACvD,GAAM,CAAAC,GAAG,CAAG,GAAI,CAAAC,KAAK,CAAC,CAAC,CACvBD,GAAG,CAACE,GAAG,CAAGH,QAAQ,CAClBC,GAAG,CAACG,MAAM,CAAG,UAAM,CACjBhB,OAAO,CAACiB,IAAI,CAAC,CAAC,CACdjB,OAAO,CAACkB,SAAS,CAACV,CAAC,CAAEC,CAAC,CAAC,CACvBT,OAAO,CAACmB,MAAM,CAAER,QAAQ,CAAGS,IAAI,CAACC,EAAE,CAAI,GAAG,CAAC,CAAE;AAC5CrB,OAAO,CAACsB,SAAS,CAACT,GAAG,CAAE,CAACH,IAAI,CAAG,CAAC,CAAE,CAACA,IAAI,CAAG,CAAC,CAAEA,IAAI,CAAEA,IAAI,CAAC,CACxDV,OAAO,CAACuB,OAAO,CAAC,CAAC,CACnB,CAAC,CACH,CAEA;AACA,IAAK,GAAI,CAAAC,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGtB,OAAO,CAAEsB,GAAG,EAAE,CAAE,CACtC,IAAK,GAAI,CAAAC,GAAG,CAAG,CAAC,CAAEA,GAAG,CAAGtB,OAAO,CAAEsB,GAAG,EAAE,CAAE,CACtC,GAAM,CAAAjB,CAAC,CAAGiB,GAAG,CAAGrB,UAAU,CAAGA,UAAU,CAAG,CAAC,CAC3C,GAAM,CAAAK,CAAC,CAAGe,GAAG,CAAGpB,UAAU,CAAGA,UAAU,CAAG,CAAC,CAC3C,GAAM,CAAAO,QAAQ,CAAGS,IAAI,CAACM,KAAK,CAACN,IAAI,CAACO,MAAM,CAAC,CAAC,CAAG,CAAC,CAAC,CAAG,EAAE,CAAE;AACrD,GAAM,CAAAC,WAAW,CAAGR,IAAI,CAACO,MAAM,CAAC,CAAC,CAAE;AACnC,GAAM,CAAAf,QAAQ,CAAGhB,KAAK,CAACwB,IAAI,CAACM,KAAK,CAACE,WAAW,CAAGhC,KAAK,CAACiC,MAAM,CAAC,CAAC,CAE9DtB,eAAe,CAACC,CAAC,CAAEC,CAAC,CAAEL,UAAU,CAAEO,QAAQ,CAAEC,QAAQ,CAAC,CACvD,CACF,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAER,mBAAOnB,IAAA,WAAQqC,GAAG,CAAEjC,SAAU,CAACkC,SAAS,CAAC,YAAY,CAAS,CAAC,CACjE,CAAC,CAED,cAAe,CAAArC,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}