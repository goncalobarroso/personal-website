{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonca\\\\Documents\\\\Curso\\\\MDM\\\\DW\\\\webdev-solo-project\\\\webdev-solo-project-app\\\\src\\\\Component\\\\CustomPatternGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport '../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomPatternGenerator = ({\n  imageArray,\n  folderNumber\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    const numRows = 15; // Number of rows\n    const numCols = 30; // Number of columns\n    const squareSize = 75; // Size of each square\n\n    canvas.width = numCols * squareSize;\n    canvas.height = numRows * squareSize;\n\n    // Function to draw a square image with a specific rotation\n    function drawSquareImage(x, y, size, rotation, imageUrl) {\n      const img = new Image();\n      img.src = imageUrl;\n      img.onload = () => {\n        context.save();\n        context.translate(x, y);\n        context.rotate(rotation * Math.PI / 180); // Convert degrees to radians\n        context.drawImage(img, -size / 2, -size / 2, size, size);\n        context.restore();\n      };\n    }\n\n    // Generate the grid of squares with random rotations and images\n    const numberOfFolders = 3; //UPDATE THE NUMBER OF FOLDERS HERE TODO: MAKE MORE PATTERNS\n    const folderNumber = Math.floor(Math.random() * numberOfFolders) + 1;\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        const x = col * squareSize + squareSize / 2;\n        const y = row * squareSize + squareSize / 2;\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\n        const randomValue = Math.random(); // Random value between 0 and 1\n\n        // Use the provided imageArray if available, otherwise use default images\n        const imageUrl = imageArray && imageArray.length === 2 ? imageArray[Math.floor(randomValue * imageArray.length)] : getDefaultImageUrl(randomValue, folderNumber);\n        drawSquareImage(x, y, squareSize, rotation, imageUrl);\n      }\n    }\n  }, [imageArray]);\n\n  // Function to get a default image URL based on random value\n  function getDefaultImageUrl(randomValue, folderNumber) {\n    const defaultImageUrls = [`./pattern${folderNumber}/pattern1.png`, `./pattern${folderNumber}/pattern2.png`, `./pattern${folderNumber}/pattern3.png`, `./pattern${folderNumber}/pattern4.png`];\n    if (randomValue < 0.25) {\n      return defaultImageUrls[0];\n    } else if (randomValue < 0.50) {\n      return defaultImageUrls[1];\n    } else if (randomValue < 0.75) {\n      return defaultImageUrls[2];\n    } else {\n      return defaultImageUrls[3];\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"background\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(CustomPatternGenerator, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = CustomPatternGenerator;\nexport default CustomPatternGenerator;\nvar _c;\n$RefreshReg$(_c, \"CustomPatternGenerator\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","CustomPatternGenerator","imageArray","folderNumber","_s","canvasRef","canvas","current","context","getContext","numRows","numCols","squareSize","width","height","drawSquareImage","x","y","size","rotation","imageUrl","img","Image","src","onload","save","translate","rotate","Math","PI","drawImage","restore","numberOfFolders","floor","random","row","col","randomValue","length","getDefaultImageUrl","defaultImageUrls","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/webdev-solo-project/webdev-solo-project-app/src/Component/CustomPatternGenerator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport '../App.css';\r\n\r\nconst CustomPatternGenerator = ({ imageArray, folderNumber }) => {\r\n  const canvasRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n    const numRows = 15; // Number of rows\r\n    const numCols = 30; // Number of columns\r\n    const squareSize = 75; // Size of each square\r\n\r\n    canvas.width = numCols * squareSize;\r\n    canvas.height = numRows * squareSize;\r\n\r\n    // Function to draw a square image with a specific rotation\r\n    function drawSquareImage(x, y, size, rotation, imageUrl) {\r\n      const img = new Image();\r\n      img.src = imageUrl;\r\n      img.onload = () => {\r\n        context.save();\r\n        context.translate(x, y);\r\n        context.rotate((rotation * Math.PI) / 180); // Convert degrees to radians\r\n        context.drawImage(img, -size / 2, -size / 2, size, size);\r\n        context.restore();\r\n      };\r\n    }\r\n\r\n    // Generate the grid of squares with random rotations and images\r\n    const numberOfFolders = 3; //UPDATE THE NUMBER OF FOLDERS HERE TODO: MAKE MORE PATTERNS\r\n    const folderNumber = Math.floor(Math.random() * numberOfFolders) + 1;\r\n    for (let row = 0; row < numRows; row++) {\r\n      for (let col = 0; col < numCols; col++) {\r\n        const x = col * squareSize + squareSize / 2;\r\n        const y = row * squareSize + squareSize / 2;\r\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\r\n        const randomValue = Math.random(); // Random value between 0 and 1\r\n\r\n        // Use the provided imageArray if available, otherwise use default images\r\n        const imageUrl = imageArray && imageArray.length === 2\r\n          ? imageArray[Math.floor(randomValue * imageArray.length)]\r\n          : getDefaultImageUrl(randomValue, folderNumber);\r\n\r\n        drawSquareImage(x, y, squareSize, rotation, imageUrl);\r\n      }\r\n    }\r\n  }, [imageArray]);\r\n\r\n  // Function to get a default image URL based on random value\r\n  function getDefaultImageUrl(randomValue, folderNumber) {\r\n    const defaultImageUrls = [\r\n      `./pattern${folderNumber}/pattern1.png`,\r\n      `./pattern${folderNumber}/pattern2.png`,\r\n      `./pattern${folderNumber}/pattern3.png`,\r\n      `./pattern${folderNumber}/pattern4.png`,\r\n    ];\r\n\r\n    if (randomValue < 0.25) {\r\n      return defaultImageUrls[0];\r\n    } else if (randomValue < 0.50) {\r\n      return defaultImageUrls[1];\r\n    } else if (randomValue < 0.75) {\r\n      return defaultImageUrls[2];\r\n    } else {\r\n      return defaultImageUrls[3];\r\n    }\r\n  }\r\n\r\n  return <canvas ref={canvasRef} className='background'></canvas>;\r\n};\r\n\r\nexport default CustomPatternGenerator;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}