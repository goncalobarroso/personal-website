{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gonca\\\\Documents\\\\Curso\\\\MDM\\\\DW\\\\solo_project\\\\webdev-solo-project-app\\\\src\\\\Component\\\\PatternGenerator.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatternGenerator = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n    canvas.width = 100;\n    canvas.height = 50;\n    const image1 = new Image();\n    const image2 = new Image();\n    const imageUrls = ['pattern1.svg', 'pattern2.svg'];\n\n    // Create a function to load and draw images\n    function loadImageAndDraw(url, x, y, rotation) {\n      const img = new Image();\n      img.src = url;\n      img.onload = () => {\n        context.save();\n        context.translate(x, y);\n        context.rotate(rotation * Math.PI / 180); // Convert degrees to radians\n        context.drawImage(img, -5, -5, 10, 10); // Assuming your square images are 10x10 pixels\n        context.restore();\n      };\n    }\n\n    // Create random positions and rotations for the square images\n    function randomizePositionsAndRotations() {\n      const positions = [];\n      const rotations = [];\n      for (let i = 0; i < 2; i++) {\n        const x = Math.floor(Math.random() * 100);\n        const y = Math.floor(Math.random() * 50);\n        const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\n        positions.push({\n          x,\n          y\n        });\n        rotations.push(rotation);\n      }\n      return {\n        positions,\n        rotations\n      };\n    }\n    const {\n      positions,\n      rotations\n    } = randomizePositionsAndRotations();\n\n    // Load and draw square images with random positions and rotations\n    loadImageAndDraw(imageUrls[0], positions[0].x, positions[0].y, rotations[0]);\n    loadImageAndDraw(imageUrls[1], positions[1].x, positions[1].y, rotations[1]);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n};\n_s(PatternGenerator, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = PatternGenerator;\nexport default PatternGenerator;\nvar _c;\n$RefreshReg$(_c, \"PatternGenerator\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","PatternGenerator","_s","canvasRef","canvas","current","context","getContext","width","height","image1","Image","image2","imageUrls","loadImageAndDraw","url","x","y","rotation","img","src","onload","save","translate","rotate","Math","PI","drawImage","restore","randomizePositionsAndRotations","positions","rotations","i","floor","random","push","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/gonca/Documents/Curso/MDM/DW/solo_project/webdev-solo-project-app/src/Component/PatternGenerator.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\nconst PatternGenerator = () => {\r\n    const canvasRef = useRef(null);\r\n  \r\n    useEffect(() => {\r\n      const canvas = canvasRef.current;\r\n      const context = canvas.getContext('2d');\r\n  \r\n      canvas.width = 100;\r\n      canvas.height = 50;\r\n  \r\n      const image1 = new Image();\r\n      const image2 = new Image();\r\n      const imageUrls = ['pattern1.svg', 'pattern2.svg'];\r\n  \r\n      // Create a function to load and draw images\r\n      function loadImageAndDraw(url, x, y, rotation) {\r\n        const img = new Image();\r\n        img.src = url;\r\n        img.onload = () => {\r\n          context.save();\r\n          context.translate(x, y);\r\n          context.rotate((rotation * Math.PI) / 180); // Convert degrees to radians\r\n          context.drawImage(img, -5, -5, 10, 10); // Assuming your square images are 10x10 pixels\r\n          context.restore();\r\n        };\r\n      }\r\n  \r\n      // Create random positions and rotations for the square images\r\n      function randomizePositionsAndRotations() {\r\n        const positions = [];\r\n        const rotations = [];\r\n        for (let i = 0; i < 2; i++) {\r\n          const x = Math.floor(Math.random() * 100);\r\n          const y = Math.floor(Math.random() * 50);\r\n          const rotation = Math.floor(Math.random() * 4) * 90; // Random rotation in 90-degree increments\r\n          positions.push({ x, y });\r\n          rotations.push(rotation);\r\n        }\r\n        return { positions, rotations };\r\n      }\r\n  \r\n      const { positions, rotations } = randomizePositionsAndRotations();\r\n  \r\n      // Load and draw square images with random positions and rotations\r\n      loadImageAndDraw(imageUrls[0], positions[0].x, positions[0].y, rotations[0]);\r\n      loadImageAndDraw(imageUrls[1], positions[1].x, positions[1].y, rotations[1]);\r\n    }, []);\r\n  \r\n    return <canvas ref={canvasRef}></canvas>;\r\n  };\r\n  \r\n  export default PatternGenerator;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}